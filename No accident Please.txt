Q1.Problem 1 : No accident please
					
Given 3 different set of coordinates of airports for ‘N’ different flights started from same point of time and place. Draw the flight path for the individual flights such that there is no intersection of flight paths for safety and optimization.
					
For example:
					
Input :
					
Flight 1 :  1,1  2,2  3,3 
Flight 2 : 1,1  2,4  3,2
Flight 3 : 1,1  4,2  3,4
					
Output :
					
Draw the path of all flights in which they had traveled.  

Solution : After thorough research I found out that this question can be solved using python language . The matplotlib library of python  . 
 Q what is matplotlib in python? 
  ans) Matplotlib is a popular Python library used for creating static, animated, and interactive visualizations in Python. It is particularly useful for creating various types of plots, charts, histograms, and other graphical representations of data. Matplotlib can be used for data exploration, data analysis, and presenting results in a visual format. It provides a wide range of customization options to create visually appealing and informative plots.

Approach:

Represent the coordinates of each flight as nodes in a graph.
Each flight path will be a set of edges connecting these nodes sequentially.

Visualization:

Use a plotting library to visualize the paths(matplotlib , as discussed earlier).

Ensure that the paths do not intersect by adjusting the coordinates if necessary.
Path Optimization:

To avoid intersection, we might need to slightly adjust the paths while ensuring minimal deviation from the original coordinates.
Implement a check to detect intersections and adjust paths accordingly .

Steps to Implement:
Parse the Input:

Read the input coordinates for each flight.
Plot Initial Paths:

Use a plotting tool (like Matplotlib) to plot the initial paths.
Check for Intersections:

Implement a function to check if two paths intersect.
If they do, adjust the paths by a small margin.
Re-plot Adjusted Paths:

Once adjustments are made, re-plot the paths to ensure no intersections.


# Import necessary libraries
import matplotlib.pyplot as plt
from matplotlib.patches import ConnectionPatch

#Code here

# Sample input
flights = {
    "Flight 1": [(1, 1), (2, 2), (3, 3)],
    "Flight 2": [(1, 1), (2, 4), (3, 2)],
    "Flight 3": [(1, 1), (4, 2), (3, 4)]
}

def do_intersect(p1, q1, p2, q2):
    def orientation(p, q, r):
        val = (q[1] - p[1]) * (r[0] - q[0]) - (q[0] - p[0]) * (r[1] - q[1])
        if val == 0: return 0
        return 1 if val > 0 else 2

    o1 = orientation(p1, q1, p2)
    o2 = orientation(p1, q1, q2)
    o3 = orientation(p2, q2, p1)
    o4 = orientation(p2, q2, q1)

    if o1 != o2 and o3 != o4:
        return True
    return False

def adjust_paths(flights):
    def shift_path(path, dx, dy):
        return [(x + dx, y + dy) for x, y in path]

    adjusted_flights = flights.copy()
    shift_value = 0.1  # initial shift value

    for f1 in flights:
        for f2 in flights:
            if f1 != f2:
                for i in range(len(flights[f1]) - 1):
                    for j in range(len(flights[f2]) - 1):
                        if do_intersect(flights[f1][i], flights[f1][i+1], flights[f2][j], flights[f2][j+1]):
                            adjusted_flights[f2] = shift_path(flights[f2], shift_value, shift_value)
                            shift_value += 0.1

    return adjusted_flights

# Plotting function
def plot_flights(flights):
    fig, ax = plt.subplots()
    colors = ['r', 'g', 'b', 'c', 'm', 'y', 'k']
    for i, (flight, coords) in enumerate(flights.items()):
        x, y = zip(*coords)
        ax.plot(x, y, marker='o', linestyle='-', color=colors[i % len(colors)], label=flight)
        for j in range(len(x)-1):
            con = ConnectionPatch((x[j], y[j]), (x[j+1], y[j+1]), "data", "data", arrowstyle="-|>", color=colors[i % len(colors)])
            ax.add_artist(con)
    ax.legend()
    plt.show()

# Adjust paths to avoid intersections
adjusted_flights = adjust_paths(flights)

# Plot the adjusted paths
plot_flights(adjusted_flights)


References used :- https://matplotlib.org/

https://github.com/matplotlib/matplotlib
https://www.youtube.com/watch?v=nzKy9GY12yo
